generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String?
  isAdmin        Boolean   @default(false)
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  favorites Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

model Movie {
  id           String    @id @default(cuid())
  title        String
  description  String
  videoUrl     String
  imageUrl    String   // <-- add this line
  thumbnailUrl String
  genre        String
  duration     Int
  createdAt    DateTime  @default(now())
  favorites    Favorite[]
}

model Favorite {
  id      String @id @default(cuid())
  userId  String
  movieId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}